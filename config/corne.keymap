/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/* Copyright 2021
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


// clang-format off

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
 * │ ` │ @ │ [ │ { │ ( │ + │ = │ ) │ } │ ] │ % │ * │ & │       │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
 * │     │ Q │ W │ F │ P │ B │ J │ L │ U │ Y │ ; │ - │ $ │     │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
 * │      │ A │ R │ S │ T │ G │ M │ N │ E │ I │ O │ ' │ \ │    │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
 * │    │   │ Z │ X │ C │ D │ V │ K │ H │ , │ . │ / │          │
 * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
 * │    │    │    │                        │    │    │    │    │
 * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
 */
// Row 1
#define CL_GRV  GRAVE  // `
#define CL_AT   N1    // @
#define CL_LBRC N2    // [
#define CL_LCBR N3    // {
#define CL_LPRN N4    // (
#define CL_PLUS N5    // +
#define CL_EQL  N6    // =
#define CL_RPRN N7    // )
#define CL_RCBR N8    // }
#define CL_RBRC N9    // ]
#define CL_PERC N0    // %
#define CL_ASTR MINUS // *
#define CL_AMPR EQUAL  // &
// Row 2
#define CL_Q    Q    // Q
#define CL_W    W    // W
#define CL_F    E    // F
#define CL_P    R    // P
#define CL_B    T    // B
#define CL_J    Y    // J
#define CL_L    U    // L
#define CL_U    I    // U
#define CL_Y    O    // Y
#define CL_SCLN P    // ;
#define CL_MINS LBRC // -
#define CL_DLR  RBRC // $
// Row 3
#define CL_A    A    // A
#define CL_R    S    // R
#define CL_S    D    // S
#define CL_T    F    // T
#define CL_G    G    // G
#define CL_M    H    // M
#define CL_N    J    // N
#define CL_E    K    // E
#define CL_I    L    // I
#define CL_O    SEMI // O
#define CL_QUOT SQT  // '
#define CL_BSLS BSLH // (backslash)
// Row 4
#define CL_Z    Z    // Z
#define CL_X    X    // X
#define CL_C    C    // C
#define CL_D    V    // D
#define CL_V    B    // V
#define CL_K    N    // K
#define CL_H    M    // H
#define CL_COMM COMMA // ,
#define CL_DOT  DOT  // .
#define CL_SLSH SLASH // /

/* Shifted symbols
   ~1234567890#!QWFPBJLUY:_^
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
 * │ ~ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ # │ ! │       │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
 * │     │   │   │   │   │   │   │   │   │   │ : │ _ │ ^ │     │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
 * │      │   │   │   │   │   │   │   │   │   │   │ " │ | │    │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
 * │    │   │   │   │   │   │   │   │   │ < │ > │ ? │          │
 * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
 * │    │    │    │                        │    │    │    │    │
 * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
 */

// Row 1
#define CL_TILD LS(CL_GRV)   // ~
#define CL_1    LS(CL_AT)    // 1
#define CL_2    LS(CL_LBRC)  // 2
#define CL_3    LS(CL_LCBR)  // 3
#define CL_4    LS(CL_LPRN)  // 4
#define CL_5    LS(CL_PLUS)  // 6
#define CL_6    LS(CL_EQL)   // 6
#define CL_7    LS(CL_RPRN)  // 7
#define CL_8    LS(CL_RCBR)  // 8
#define CL_9    LS(CL_RBRC)  // 9
#define CL_0    LS(CL_PERC)  // 0
#define CL_HASH LS(CL_ASTR)  // #
#define CL_EXLM LS(CL_AMPR)  // !

// Row 2
#define CL_COLN LS(CL_SCLN)  // :
#define CL_UNDS LS(CL_MINS)  // _
#define CL_CIRC LS(CL_DLR)   // ^
// Row 3
#define CL_DQUO LS(CL_QUOT) // "
#define CL_PIPE LS(CL_BSLS) // |
// Row 4
#define CL_LABK LS(CL_COMM) // <
#define CL_RABK LS(CL_DOT)  // >
#define CL_QUES LS(CL_SLSH) // ?

/* AltGr symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
 * │   │   │   │   │   │   │   │   │   │   │   │   │   │       │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
 * │     │   │   │   │   │   │   │   │ Ü │   │   │   │   │     │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
 * │      │   │   │ Ş │   │ İ │   │   │   │ İ │ Ö │   │   │    │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
 * │    │   │   │   │ Ç │   │   │   │   │   │   │   │          │
 * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
 * │    │    │    │                        │    │    │    │    │
 * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
 */

#define CL_GBRV RA(CL_G)
#define CL_CCED RA(CL_C)
#define CL_ODIA RA(CL_O)
#define CL_UDIA RA(CL_U)
#define CL_IDOT RA(CL_I)
#define CL_SCED RA(CL_S)

#define _BASE 0
#define _COLEMAKDH 1
#define _LOWER 2
#define _RAISE 3
#define _ADJUST 4
#define _NUMBER 5
#define _YOUTUBE 6


/ {
        behaviors {
          td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>, <&kp N3>;
          };

          td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp CL_ASTR>, <&kp CL_AMPR>;
          };
        };

       conditional_layers {
           compatible = "zmk,conditional-layers";
           tri_layer {
             if-layers = <_LOWER _RAISE>;
             then-layer = <_ADJUST>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |NUM/Tab |  Q  |  W  |  E  |  R  |  T  |   |  Y  |    U   |  I  |  O  |    P   |TD: [ ] |
// |CTL/Esc |  A  |  S  |  D  |  F  |  G  |   |  H  |    J   |  K  |  L  |    ;   |CTL/QUOT|
// |SFT/Caps|ALT/Z|  X  |  C  |  V  |  B  |   |  N  |    M   |  ,  |  .  |ALT/SLSH|SFT/BSLS|
//                      |LGUI |LWR/SPC|ENT|   | ENT |RSE/Bspc|ALTGr|
                        bindings = <
   &lt _NUMBER TAB &kp Q     &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &td0
   &mt LCTRL ESC   &kp A     &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &mt RCTRL SQT
   &mt LSHFT CLCK &mt LALT Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &mt LALT FSLH &mt RSHFT BSLH
                  &kp LGUI &lt _LOWER SPACE &kp RET    &kp RET &lt _RAISE BSPC &kp RALT
                        >;
                };

                colemakdh_layer {
// -----------------------------------------------------------------------------------------
// |        |  Q  |  W  |  F  |  P  |  B  |   |  J  |    L   |  U  |  Y  |    ;   |        |
// |        |  A  |  R  |  S  |  T  |  G  |   |  M  |    N   |  E  |  I  |    O   |        |
// |        |     |  X  |  C  |  D  |  V  |   |  K  |    H   |  ,  |  .  |        |        |
//                      |     |     |     |   |     |        |     |
                        bindings = <
   &trans &kp Q     &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &trans
   &trans &kp A     &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &trans
   &trans &trans    &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &trans   &trans
                     &trans &trans &trans      &trans &trans &trans
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |      | F1  | F2  | F3  | F4  | F5  |               |     |     |  Ü  |     |  ^  |   $  |
// |      | F6  | F7  | F8  | F9  | F10 |               |     |     |  !  |  İ  |  Ö  |      |
// |      |     |     |     | F11 | F12 |               |     |     |     |     |     |      |
//                    |     |     |     |               |     |     |     |
                        bindings = <
   &trans &kp F1   &kp F2   &kp F3   &kp F4   &kp F5         &trans &trans &kp CL_UDIA &trans &kp CL_CIRC &kp CL_DLR
   &trans &kp F6   &kp F7   &kp F8   &kp F9   &kp F10        &trans &trans &kp CL_EXLM &kp CL_IDOT &kp CL_ODIA &trans
   &trans &trans   &trans   &trans   &kp F11  &kp F12         &trans   &trans   &trans &trans    &trans &trans
                          	        &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  `   |  @  |  [  |  {  |  (  |  +  |         |  =  |  )  |  }  |  ]  |  %  |TD: * & |
// |      |  &  |     |  Ş  |     |  Ğ  |         |Left |Down | Up  |Right|PrtSC|        |
// |      |     |     |     |     |     |         |Home | End |PgUp |PgDwn|     |        |
//                    | GUI |     | SPC |         | ENT |     | ALT |
                        bindings = <
   &kp CL_GRV  &kp CL_AT &kp CL_LBRC &kp CL_LCBR &kp CL_LPRN &kp CL_PLUS        &kp CL_EQL &kp CL_RPRN  &kp CL_RCBR &kp CL_RBRC &kp CL_PERC &td1
   &trans &kp CL_AMPR   &trans &kp CL_SCED   &trans   &kp CL_GBRV      &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp PSCRN &trans
   &trans &trans   &trans &trans   &trans   &trans      &kp HOME &kp END  &kp PG_UP        &kp PG_DN &trans &trans
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };


/*                 MY_EMPTY_LAYER { */
/* // ----------------------------------------------------------------------------------------- */
/* // |      |     |     |     |     |     |             |     |     |     |     |     |      | */
/* // |      |     |     |     |     |     |             |     |     |     |     |     |      | */
/* // |      |     |     |     |     |     |             |     |     |     |     |     |      | */
/* //                    |     |     |     |             |     |     |     | */
/*                         bindings = < */
/*    &trans &trans &trans &trans &trans &trans          &trans &trans &trans &trans &trans &trans */
/*    &trans &trans &trans &trans &trans &trans          &trans &trans &trans &trans &trans &trans */
/*    &trans &trans &trans &trans &trans &trans          &trans &trans &trans &trans &trans &trans */
/*                     	  &trans &trans &trans          &trans &trans &trans */
/*                         >; */
/*                 }; */

                adjust_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |    |             |    |    |    |    |     |BT_CLR|
// |      |     |     |     |     |     |             |BT_1 |BT_2 |BT_2 |BT_3 |BT_4 |BT_NXT|
// |      |     |     |TG:CL|     |     |             |     |     |     |     |     |BT_PRV|
//                    |     |     |     |             |     |     |     |
                        bindings = <
   &trans &trans &trans &trans &trans &kp C_BRI_DN          &kp C_BRI_UP &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans &bt BT_CLR
   &trans &trans &trans &trans &trans &trans          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_NXT
   &trans &trans &trans &tog _COLEMAKDH &trans &trans          &trans &trans &trans &trans &trans &bt BT_PRV
                    	  &trans &trans &trans          &trans &trans &trans
                        >;
                };

                number_layer {
// -----------------------------------------------------------------------------------------
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  7  |  7  |  7  | BKSP |
// |      |     |     |     |     |     |   |  +  |  4  |  5  |  6  |  *  |  `   |
// |      |     |     |     |     |     |   |  -  |  1  |  2  |  3  |  / |  ~   |
//                    |     |     |     |   | BKSP|  0  |  .  |
                        bindings = <
   &trans &kp CL_1 &kp CL_2 &kp CL_3 &kp CL_4 &kp CL_5     &kp CL_6 &kp CL_7 &kp CL_8 &kp CL_9 &kp CL_0 &trans
   &trans &trans &trans &trans &trans &trans               &kp KP_PLUS &kp CL_4 &kp CL_5 &kp CL_6 &kp KP_MULTIPLY &trans
   &trans &trans &trans &trans &trans &trans               &kp KP_MINUS &kp CL_1 &kp CL_2 &kp CL_3 &kp KP_DIVIDE &trans
                    	  &trans &trans &trans                 &kp BSPC &kp CL_0 &kp KP_DOT
                        >;
                };
        };
};
